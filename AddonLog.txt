File: addon.json
z
{
    "legacy_addon_id": "",
    "title": "[Wutime] Addon Log",
    "description": "",
    "version_id": 1000000,
    "version_string": "1.0.0",
    "dev": "",
    "dev_url": "",
    "faq_url": "",
    "support_url": "",
    "extra_urls": [],
    "require": [],
    "icon": ""
}

File: Listener.php
z
<?php

namespace Wutime\AddonLog;

use XF\AddOn\AddOn;
use XF\Entity\AddOn as AddOnEntity;

class Listener
{
    public static function postInstall(
        AddOn $addOn,
        AddOnEntity $installedAddOn,
        array $json,
        array &$stateChanges
    ) {
        $version = $json['version_string'] ?? '';
        self::log(
            $installedAddOn->addon_id,
            $installedAddOn->title,
            'install',
            $version,
            '' // no prior version
        );
    }

    public static function postUpgrade(
        AddOn $addOn,
        AddOnEntity $installedAddOn,
        array $json,
        array &$stateChanges
    ) {
        $version = $json['version_string'] ?? '';
        $versionPrior = $installedAddOn->version_string ?? '';

        self::log(
            $installedAddOn->addon_id,
            $installedAddOn->title,
            'upgrade',
            $version,
            $versionPrior
        );
    }

    public static function postUninstall(
        AddOn $addOn,
        string $addOnId,
        array $json
    ) {
        $title = $json['title'] ?? $addOnId;
        $version = $json['version_string'] ?? '';

        self::log(
            $addOnId,
            $title,
            'delete',
            $version,
            '' // prior version unknown
        );
    }

    public static function postRebuild(
        AddOn $addOn,
        AddOnEntity $installedAddOn,
        array $json
    ) {
        $version = $json['version_string'] ?? '';
        $versionPrior = $installedAddOn->version_string ?? '';

        self::log(
            $installedAddOn->addon_id,
            $installedAddOn->title,
            'rebuild',
            $version,
            $versionPrior
        );
    }

    protected static function log(
        string $addonId,
        string $title,
        string $type,
        string $version = '',
        string $versionPrior = ''
    ) {

    	$userId = \XF::visitor()->user_id;

\XF::logError(sprintf(
    "[AddonLog] Logging: %s, %s, %s, %s, %s, %s",
    $addonId,
    $title,
    $type,
    $version,
    $versionPrior,
    $userId
));

        /** @var \Wutime\AddonLog\Repository\Log $repo */
        $repo = \XF::app()->repository('Wutime\AddonLog:Log');

        $repo->logAction(
            $addonId,
            $title,
            $type,
            \XF::visitor()->user_id ?: (PHP_SAPI === 'cli' ? 1 : 0),
            $version,
            $versionPrior
        );
    }
}


File: cmd.php
z
<?php

use XF\Cli\Runner;

$phpVersion = phpversion();
if (version_compare($phpVersion, '7.2.0', '<'))
{
	die("PHP 7.2.0 or newer is required. $phpVersion does not meet this requirement. Please ask your host to upgrade PHP.");
}

$dir = __DIR__;
require $dir . '/src/XF.php';

\XF::start($dir);

$runner = new Runner();
$runner->run();


File: Setup.php
z
<?php

namespace Wutime\AddonLog;

use XF\AddOn\AbstractSetup;
use XF\AddOn\StepRunnerInstallTrait;
use XF\AddOn\StepRunnerUninstallTrait;
use XF\AddOn\StepRunnerUpgradeTrait;
use XF\Db\Schema\Create;


class Setup extends AbstractSetup
{
	use StepRunnerInstallTrait;
	use StepRunnerUpgradeTrait;
	use StepRunnerUninstallTrait;


    public function installStep1()
    {
		$this->schemaManager()->createTable('xf_wu_addon_log', function (Create $table) {
		    $table->addColumn('addon_log_id', 'int')->autoIncrement();
		    $table->addColumn('addon_id', 'varbinary', 50);
		    $table->addColumn('title', 'varchar', 75);
		    $table->addColumn('type', 'enum')->values(['install', 'upgrade', 'delete', 'enable', 'disable', 'rebuild']);
		    $table->addColumn('log_date', 'int');
		    $table->addColumn('user_id', 'int');
		    $table->addColumn('version_string', 'varchar', 20)->setDefault('');
		    $table->addColumn('version_string_prior', 'varchar', 20)->setDefault('');
		    $table->addPrimaryKey('addon_log_id');
		    $table->addKey('log_date');
		});

    }

    public function uninstall(array $stepParams = [])
    {
        $this->schemaManager()->dropTable('wu_addon_log');
    }
}

File: Repository/Log.php
z
<?php

namespace Wutime\AddonLog\Repository;

use XF\Mvc\Entity\Finder;
use XF\Mvc\Entity\Repository;

class Log extends Repository
{
    public function findLogsForList(): Finder
    {
        return $this->finder('Wutime\AddonLog:Log')->order('log_date', 'DESC');
    }

    public function logAction($addonId, $title, $type, $userId)
    {
        $log = $this->em->create('Wutime\AddonLog:Log');
        $log->bulkSet([
            'addon_id' => $addonId,
            'title' => $title,
            'type' => $type,
            'log_date' => \XF::$time,
            'user_id' => $userId
        ]);
        $log->save();
    }
}


File: Entity/Log.php
z
<?php

namespace Wutime\AddonLog\Entity;

use XF\Mvc\Entity\Entity;
use XF\Mvc\Entity\Structure;

class Log extends Entity
{
    public static function getStructure(Structure $structure)
    {
        $structure->table = 'xf_wu_addon_log';
        $structure->shortName = 'Wutime\AddonLog:Log';
        $structure->primaryKey = 'addon_log_id';
		$structure->columns = [
		    'addon_log_id' => ['type' => self::UINT, 'autoIncrement' => true],
		    'addon_id' => ['type' => self::BINARY, 'maxLength' => 50, 'required' => true],
		    'title' => ['type' => self::STR, 'maxLength' => 75, 'required' => true],
		    'type' => [
		        'type' => self::STR,
		        'allowedValues' => ['install', 'upgrade', 'delete', 'enable', 'disable', 'rebuild'],
		        'required' => true
		    ],
		    'log_date' => ['type' => self::UINT, 'required' => true],
		    'user_id' => ['type' => self::UINT, 'required' => true],
		    'version_string' => ['type' => self::STR, 'maxLength' => 20, 'default' => ''],
		    'version_string_prior' => ['type' => self::STR, 'maxLength' => 20, 'default' => '']
		];

        $structure->getters = [];
        $structure->relations = [
            'User' => [
                'entity' => 'XF:User',
                'type' => self::TO_ONE,
                'conditions' => 'user_id',
                'primary' => true
            ]
        ];
        $structure->defaultWith = ['User'];

        return $structure;
    }
}

File: Admin/Controller/Log.php
z
<?php

namespace Wutime\AddonLog\Admin\Controller;

use XF\Admin\Controller\AbstractController;
use XF\Mvc\ParameterBag;

class Log extends AbstractController
{
    public function actionIndex()
    {
        $logRepo = \XF::app()->repository('Wutime\AddonLog:Log');

        $logs = $logRepo->findLogsForList()->fetch();

        return $this->view('Wutime\AddonLog:Log\List', 'wutime_addonlog_log_list', [
            'logs' => $logs
        ]);
    }
}


File: XF/Admin/Controller/AddOn.php
z
<?php

namespace Wutime\AddonLog\XF\Admin\Controller;

class AddOn extends XFCP_AddOn
{
    public function actionInstall()
    {
        $response = parent::actionInstall();
        if ($this->isPost()) {
            $addOnId = $this->filter('addon_id', 'str');
            $title = $this->filter('title', 'str');
            $userId = \XF::visitor()->user_id ?: 0;
            $this->repository('Wutime\AddonLog:Log')->logAction($addOnId, $title, 'install', $userId);
        }
        return $response;
    }

    public function actionUpgrade()
    {
        $response = parent::actionUpgrade();
        if ($this->isPost()) {
            $addOnId = $this->filter('addon_id', 'str');
            $title = $this->filter('title', 'str');
            $userId = \XF::visitor()->user_id ?: 0;
            $this->repository('Wutime\AddonLog:Log')->logAction($addOnId, $title, 'upgrade', $userId);
        }
        return $response;
    }

    public function actionUninstall()
    {
        $response = parent::actionUninstall();
        if ($this->isPost()) {
            $addOnId = $this->filter('addon_id', 'str');
            $title = $this->filter('title', 'str');
            $userId = \XF::visitor()->user_id ?: 0;
            $this->repository('Wutime\AddonLog:Log')->logAction($addOnId, $title, 'delete', $userId);
        }
        return $response;
    }

    public function actionToggle()
    {
        $response = parent::actionToggle();
        if ($this->isPost()) {
            $addOnIds = $this->filter('addon_ids', 'array-str');
            $active = $this->filter('active', 'array-bool');

            foreach ($addOnIds as $index => $addOnId) {
                $addOn = $this->app()->addOnManager()->getAddOn($addOnId);
                $title = $addOn ? $addOn->title : $addOnId;
                $userId = \XF::visitor()->user_id ?: 0;
                $type = $active[$index] ? 'enable' : 'disable';
                $this->repository('Wutime\AddonLog:Log')->logAction($addOnId, $title, $type, $userId);
            }
        }
        return $response;
    }
}

File: _output/extension_hint.php
z
<?php

// ################## THIS IS A GENERATED FILE ##################
// DO NOT EDIT DIRECTLY. EDIT THE CLASS EXTENSIONS IN THE CONTROL PANEL.

/**
 * @noinspection PhpIllegalPsrClassPathInspection
 * @noinspection PhpMultipleClassesDeclarationsInOneFile
 */

namespace Wutime\AddonLog\XF\Admin\Controller
{
	class XFCP_AddOn extends \XF\Admin\Controller\AddOn {}
}


File: _output/code_event_listeners/_metadata.json
z
{
    "addon_post_install_1a33c789eb0cbbf034b6a840a65ac394.json": {
        "hash": "4b529788dc7cd5596dc97279494923ea"
    },
    "addon_post_rebuild_98aa447df344a9b23d79d09a28c0c6b8.json": {
        "hash": "1cfc6a69924c44fcc27096c86204e6f2"
    },
    "addon_post_uninstall_06401cbc60e9f12a953a23dab46f67e2.json": {
        "hash": "ed2cd502709747ea57f71095945d9922"
    },
    "addon_post_upgrade_c059604d6a659889246a5db589f81933.json": {
        "hash": "656a3507d23c9c47e537fd3d2a632e03"
    }
}

File: _output/code_event_listeners/addon_post_upgrade_c059604d6a659889246a5db589f81933.json
z
{
    "event_id": "addon_post_upgrade",
    "execute_order": 10,
    "callback_class": "Wutime\\AddonLog\\Listener",
    "callback_method": "postUpgrade",
    "active": true,
    "hint": "",
    "description": ""
}

File: _output/code_event_listeners/addon_post_uninstall_06401cbc60e9f12a953a23dab46f67e2.json
z
{
    "event_id": "addon_post_uninstall",
    "execute_order": 10,
    "callback_class": "Wutime\\AddonLog\\Listener",
    "callback_method": "postUninstall",
    "active": true,
    "hint": "",
    "description": ""
}

File: _output/code_event_listeners/addon_post_install_1a33c789eb0cbbf034b6a840a65ac394.json
z
{
    "event_id": "addon_post_install",
    "execute_order": 10,
    "callback_class": "Wutime\\AddonLog\\Listener",
    "callback_method": "postInstall",
    "active": true,
    "hint": "XF\\AddOn\\AddOn",
    "description": ""
}

File: _output/code_event_listeners/addon_post_rebuild_98aa447df344a9b23d79d09a28c0c6b8.json
z
{
    "event_id": "addon_post_rebuild",
    "execute_order": 10,
    "callback_class": "Wutime\\AddonLog\\Listener",
    "callback_method": "postRebuild",
    "active": true,
    "hint": "admi",
    "description": ""
}

File: _output/class_extensions/_metadata.json
z
{
    "XF-Admin-Controller-AddOn_Wutime-AddonLog-XF-Admin-Controller-AddOn.json": {
        "hash": "f9f5fe00e2648d81b4351bee21d644cc"
    }
}

File: _output/class_extensions/XF-Admin-Controller-AddOn_Wutime-AddonLog-XF-Admin-Controller-AddOn.json
z
{
    "from_class": "XF\\Admin\\Controller\\AddOn",
    "to_class": "Wutime\\AddonLog\\XF\\Admin\\Controller\\AddOn",
    "execute_order": 10,
    "active": true
}

File: _output/phrases/_metadata.json
z
{
    "admin_navigation.addonLog.txt": {
        "global_cache": false,
        "version_id": 1000000,
        "version_string": "1.0.0",
        "hash": "cdee16ac1c44295062aa35ab6481d111"
    },
    "wutime_addonlog_logs.txt": {
        "global_cache": false,
        "version_id": 1000000,
        "version_string": "1.0.0",
        "hash": "956e6a6cd081267ad653b87c4c7afbb1"
    }
}

File: _output/phrases/admin_navigation.addonLog.txt
z
Add-on Log

File: _output/phrases/wutime_addonlog_logs.txt
z
Add-on logs

File: _output/templates/_metadata.json
z
{
    "admin/wutime_addonlog_log_list.html": {
        "version_id": 1000000,
        "version_string": "1.0.0",
        "hash": "4015492be7abc639806e830f8c49a5d3"
    }
}

File: _output/templates/admin/wutime_addonlog_log_list.html
z
<xf:title>{{ phrase('wutime_addonlog_logs') }}</xf:title>
<xf:page option="wutime_addonlog_logs" />

<xf:macro name="log_row" arg-log="!">
    <tr class="dataList-row">
        <td class="dataList-cell">{{ $log.addon_id }}</td>
        <td class="dataList-cell">{{ $log.title }}</td>
        <td class="dataList-cell">
            <xf:if is="$log.type == 'install'">
                {{ phrase('install') }}
            <xf:elseif is="$log.type == 'upgrade'" />
                {{ phrase('upgrade') }}
            <xf:elseif is="$log.type == 'delete'" />
                {{ phrase('delete') }}
            <xf:elseif is="$log.type == 'enable'" />
                {{ phrase('enable') }}
            <xf:elseif is="$log.type == 'disable'" />
                {{ phrase('disable') }}
            <xf:else />
                {{ $log.type }}
            </xf:if>
        </td>
        <td class="dataList-cell"><xf:date time="{$log.log_date}" /></td>
        <td class="dataList-cell">
            <xf:if is="$log.User">
                <a href="{{ link('users/edit', $log.User) }}">{{ $log.User.username }}</a>
            <xf:else />
                {{ phrase('guest') }}
            </xf:if>
        </td>
    </tr>
</xf:macro>

<xf:css>
.dataList-cell { padding: 5px 10px; }
</xf:css>

<div class="block">
    <div class="block-container">
        <div class="block-body">
            <xf:datalist data-xf-init="responsive-data-list">
                <tr class="dataList-row dataList-row--header">
                    <th class="dataList-cell">Add-on ID</th>
                    <th class="dataList-cell">Title</th>
                    <th class="dataList-cell">Type</th>
                    <th class="dataList-cell">Date</th>
                    <th class="dataList-cell">User</th>
                </tr>
                <xf:foreach loop="$logs" value="$log">
                    <xf:macro name="log_row" arg-log="{$log}" />
                </xf:foreach>
            </xf:datalist>
        </div>
    </div>
</div>

File: _output/admin_navigation/_metadata.json
z
{
    "addonLog.json": {
        "hash": "d5cdcc051c56fe4cd7cc3df3a927e3c3"
    }
}

File: _output/admin_navigation/addonLog.json
z
{
    "parent_navigation_id": "logsMisc",
    "display_order": 600,
    "link": "wu-logs-addon",
    "icon": "",
    "admin_permission_id": "viewLogs",
    "debug_only": false,
    "development_only": false,
    "hide_no_children": false
}

File: _output/routes/_metadata.json
z
{
    "admin_wu-logs-addon_.json": {
        "hash": "212af8182aff2da75d6584801292b8c3"
    }
}

File: _output/routes/admin_wu-logs-addon_.json
z
{
    "route_type": "admin",
    "route_prefix": "wu-logs-addon",
    "sub_name": "",
    "format": "",
    "build_class": "",
    "build_method": "",
    "controller": "Wutime\\AddonLog\\Admin\\Controller\\Log",
    "context": "",
    "action_prefix": "index"
}

